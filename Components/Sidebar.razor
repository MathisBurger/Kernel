@using Kernel.Models.Shared
@inject NavigationManager NavigationManager

<div class="d-flex flex-column flex-shrink-0 p-3 text-white bg-dark" style="width: 280px; height: 95vh">
  <a class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
    <span class="fs-4">Menu</span>
  </a>
  <hr>
  <ul class="nav nav-pills flex-column mb-auto">
    @foreach (var element in GetAllSidebarElements())
    {
      <li class="nav-item">
        <a @onclick="() => NotifyStateChanged(element)" class="@GetClassNameDependingOnCurrentRoute(element.Route)" aria-current="page" style="text-decoration: none; color: white">
          @element.Label
        </a>
      </li>
    }
  </ul>
  <hr>
  <SidebarUserDropdown></SidebarUserDropdown>
</div>

@code
{
  private string currentRoute = "";

  protected override void OnInitialized()
  {
    currentRoute = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
  }
  
  private void NotifyStateChanged(SidebarElement element)
  {
    NavigationManager.NavigateTo(GetHrefFromRoute(element.Route));
    currentRoute = element.Route;
    StateHasChanged();
  }
  
  
  private string GetCurrentRoute()
  {
    return currentRoute;
  }

  private string GetHrefFromRoute(string route)
  {
    return "/" + route;
  }

  private string GetClassNameDependingOnCurrentRoute(string route)
  {
    if (GetCurrentRoute() == route)
    {
      return "nav-link active";
    }
    return "nav-link";
  }

  private SidebarElement[] GetAllSidebarElements()
  {
    return new[]
    {
      new SidebarElement("Dashboard", "dashboard"),
      new SidebarElement("Modules", "modules")
    };
  }
}
